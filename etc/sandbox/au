#!/bin/bash

# To control where the generated files go, edit the following line

Var="$HOME/opt/gold/lib"
Doc="$HOME/opt/gold/doc"

hello() { cat<<EOF	
${red}au is GOLD = the Gawk Object Layer Development environment
v0.5 (c) 2018, Tim Menzies, BSD 2-clause license${white}
EOF
}

copyright() { hello; cat <<EOF
All rights reserved.

Copyright (c) 2018, Tim Menzies
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

* Redistributions of source code must retain the above copyright notice, this
  list of conditions and the following disclaimer.

* Redistributions in binary form must reproduce the above copyright notice,
  this list of conditions and the following disclaimer in the documentation
  and/or other materials provided with the distribution.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
EOF
}

mkdir -p $Var $Doc

ltyl=$(tput setaf 11)
white=$(tput setaf 15)
red=$(tput setaf 1)

if [ ! -f .gitignore ]; then
  echo $Var > .gitignore
  echo $Dpc >> .gitignore
  git add .gitignore
fi

cat<<EOF>$Var/vimrc
        set backupdir-=.
	set backupdir^=~/tmp,/tmp
	set nocompatible              " required
	filetype plugin indent on
	set modelines=3
	set scrolloff=3
	set autoindent
	set hidden "remember ls
	set wildmenu
	set wildmode=list:longest
	set visualbell
	set ttyfast
	set backspace=indent,eol,start
	set laststatus=2
	set splitbelow
	set mouse=a
	set title
	set number
	autocmd BufEnter * cd %:p:h
	set showmatch
	set matchtime=15
	set background=light
	set syntax=on
	syntax enable
	set ignorecase
	set incsearch
	set smartcase
	set showmatch
	set hlsearch
	colorscheme delek 
	set hlsearch!
	nnoremap <F3> :set hlsearch!<CR>
	set ruler
	set formatoptions+=cro
EOF

prep() {
  for f in *.awk; do
    g="$Var/$f"
    if [ "$f" -nt "$g" ]; then
      echo "# au $f ==> $g"  >&2
      cat $f | gawk '
      BEGIN {In=1}
      gsub(/^\"\"\"/,"") { In =  1 - In }
                         { pre  = In ? "" : "##" 
    		                   print pre prep($0)
                         }
      function prep(txt) {
        if (txt ~ /^@include/) return txt
        if (txt ~ /^[ \t]*#/ ) return txt
	txt= gensub(/@([A-Z][^\(]+)\(([^,]+),/,
	            "polymorphism(\\2,\"\\1\")@METHOD(\\2,",
		    "g",txt)
        txt= gensub(/\.([^0-9])([a-zA-Z0-9_]*)/, 
	            "[\"\\1\\2\"]", 
	            "g", txt)
        gsub(/__/,".",txt)
        return txt
       }
      ' $f > $g
    fi
  done
}
publish() {
  for f in *.awk; do
    g=$(basename $f ".awk")
    g="$Doc/$g.md"
    if [ "$f" -nt "$g" ]; then
      echo "# au $f ==> $g"  >&2
      cat $f | gawk 'BEGIN {In = 1; Pre=1}
	gsub(/^"""/,"") {
	    In =  1 - In
	    if (Pre)
	       Pre=0
	    else {
	      if (In)  {
	        print ""
	        print "```awk " $0
	      } else {
	        print "```" $0
	        print "" } }
	    next
	    }
	Pre { next }
	    { sub(/^#/,"")
	      print }
	END { if (In) print "```\n" }
      ' $f > $g
    fi
  done
}

banner() { cat <<-"EOF"

	                .-'''-.
	              '   _    \  .---._______
	            /   /` '.   \ |   |\  ___ `'.
	     .--./).   |     \  ' |   | ' |--.\  \
	    /.''\\ |   '      |  '|   | | |    \  '
	   | |  | |\    \     / / |   | | |     |  '
	    \`-' /  `.   ` ..' /  |   | | |     |  |
	    /("'`      '-...-'`   |   | | |     ' .'
	    \ '---.               |   | | |___.' /'
	     /'""'.\              |   |/_______.'/
	    ||     ||             '---'\_______|/
	    \'. __//
	     `'---'                              

EOF
}

help() {
  hello
  echo -n $ltyl; banner; echo -n $white
  cat<<-EOF
	./au FILE       	run FILE.awk
	./au FILE -f tests.awk 	load FILE.awk, then run the tests
	./au ed FILE		edit FILE 
	./au ok 		run all tests
	./au zap 		delete complied files (forces recompile)
	./au pull		get from git
	./au push		send back to git
	./au publish		show license
	./au license		show license
	./au help		show help
 
	As a side-effect of running ./au, the directory "$Var"
	and "$Doc" are updated with current versions of the 
	runtime code and markdowns generated from the X.awk
        files in this directory.

	To use the generated awk, add "$Var" to your AWKPATH.

	Note that this code cannot load any X.awk file for
	X in ed, ok, zap, pull, push, publish, license, help. 
	EOF
}

if [ -z "$1" ]; then
  hello; echo
  echo "Type './au help' for a list of options"
  prep
else
  x=$1
  shift
  echo "$*"
  if   [[ "$x" == "ed"      ]]; then vim -u $Var/vimrc $1
  elif [[ "$x" == "zap"     ]]; then rm $Var/*.awk $Doc/*.md
  elif [[ "$x" == "pull"    ]]; then git pull
  elif [[ "$x" == "help"    ]]; then help
  elif [[ "$x" == "publish" ]]; then publish
  elif [[ "$x" == "license" ]]; then copyright
  elif [[ "$x" == "ok"      ]]; then bash au tests
  elif [[ "$x" == "push"    ]]; then
     git status
     git commit -am "commiting"
     git push
  else
    prep
    stem=$(basename $x ".awk")
    f=$stem.awk
    g="$Var/$f"
    AWKPATH="$Var:./:$AWKPATH" gawk -v MAIN="$stem" -f $g $@
  fi
fi
