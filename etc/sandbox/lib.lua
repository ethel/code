require "the"

-------------------------------------------------------------
-- ## Misc  Stuff 

int   = math.floor
printf= function (s, ...) return io.write(s:format(...)) end
match = function (s,p)    return string.match(s,p) ~= nil end

-------------------------------------------------------------
-- ## Maths Stuff

-- ### close(m:number, n:number [, e:float])
-- Return true are `m` and `n` are within `e`% of each other
-- (default value for e = 1).
function close(m,n,e) 
  e = e and e or 1
  return math.abs(m-n)/n <= e/100 end

-- ### rand()
-- Return a random number 0..1. To set the random number seed,
-- use `rseed(n:int)`.
do
  local seed0     = 10013
  local seed      = seed0
  local modulus   = 2147483647
  local multipler = 16807
  function rseed(n) seed = n or seed0 end
  local function rand() -- park miller 
    seed = (multipler * seed) % modulus
    return seed / modulus end end

-------------------------------------------------------------
-- ## Table Stuff

-- ### ordered(t:table)
-- Iterator. Returns key,values in key sorted order.
function ordered(t)
  local i,tmp = 0,{}
  for key,_ in pairs(t) do tmp[#tmp+1] = key end
  table.sort(tmp)
  return function () 
    if i < #tmp then 
      i=i+1; return tmp[i], t[tmp[i]] end end end

-- ### member(x,t:table)
-- Returns true if x is in x
local function member(x,t)
  for _,y in pairs(t) do
    if x== y then return true end end
  return false
end

-------------------------------------------------------------
-- ## Environment Stuff
-- ### args(settings:table, ignore: table, updates:table)
-- Reading from `updates` (or, if missing, `arg`),
-- ignoring any flags listed in `ignore`, update `settings`
-- with command-line settings such as `-k a=1 b=2`
-- (which sets `k` to true and `a,b` to 1,2).
function args(settings,ignore, updates)
  updates = updates or arg
  ignore = ignore or {}
  local i = 1
  while updates[i] ~= nil  do
    local flag = updates[i]
    local b4   = #flag
    flag = flag:gsub("^[-]+","")
    if not member(flag,ignore) then
      if settings[flag] == nil then error("unknown flag '" .. flag .. "'")
      else
        if b4 - #flag == 2     then settings[flag] = true
        elseif b4 - #flag == 1 then
          local a1 = updates[i+1]
          local a2 = tonumber(a1)
          settings[flag] = a2 or a1
          i = i + 1 end end end
    i = i + 1 end
  return settings end

-------------------------------------------------------------
-- ## String  Stuff

-- ### scan(s:string): string
-- Convert `s` into a string or number, as appropriate.
function scan(s) return tonumber(s) or s end

-- ### rep(s: string, n: int): string
-- Repeat a string, n times
function rep(s, n) return n > 0 and s .. rep(s, n-1) or "" end

-- ### split(s:string, sep:string [, use:function, prep:function]): list 
-- Return a table of cells generated by spliting `s` on `sep`.
function split(s, sep)
  local t, sep = {}, sep or ","
  local notsep = "([^" ..sep.. "]+)"
  for y in string.gmatch(s, notsep) do t[#t+1] = y end 
  return t end

-- ### sub(s: string, [lo : int], [hi : int]): string
-- Extract substrings. Allow Python style negative indexes
function sub(s,lo,hi) 
  if lo and lo < 0 then
    return sub(s, string.len(s) + lo +1)
  else
    return string.sub(s,lo and lo or 1,hi) end end    

function subOkay()
  assert(sub("timm")     == "timm")
  assert(sub("timm",2)   == "imm")
  assert(sub("timm",2,3) == "im")
  assert(sub("timm",-1)  == "m")
  assert(sub("aa",3,10)  == "")
end

-- ### oo(x : anything)
-- Print anything, including nested things
function oo(data) 
  local seen={}
  local function go(x,       str,sep)  
    if type(x) ~= "table" then return tostring(x) end
    if seen[x]            then return "..." end
    seen[x] = true
    for k,v in ordered(x) do
      str = str .. sep .. k .. ": " .. go(v, "{","")
      sep = ", " end 
    return str .. '}'
  end 
  print(go(data,"{","")) end  

-------------------------------------------------------------
-- ## Meta  Stuff

-- ## roguesOkay()
-- Checked for escaped local. Report number of assertion failures.
function roguesOkay()
  local ignore = {
           math=true, package=true, table=true, coroutine=true, 
           os=true, io=true, bit32=true, string=true,
           arg=true, debug=true, _VERSION=true, _G=true }
  for k,v in pairs( _G ) do
    if type(v) ~= "function" and not ignore[k] then
       assert(match(k,"^[A-Z]"),"rogue local "..k) end end end

-------------------------------------------------------------
-- ## Unit Test  Stuff

-- ### tests()
-- Run any function ending in "Ok". Report number of failures.
function tests()
  local try,fail=0,0
  local function go(goal)
    for k,f in ordered( _G ) do
      if type(f) == "function" and match(k,goal .. "$") then
        print("-- Testing if " .. k .. "?")
        The = defaults()
        try = try + 1
        local passed,err = pcall(f)
        if not passed then 
          fail = fail + 1
          print("-- E> Failure: " .. err)  end end end end
   for _,v in pairs{"Okay","OkaY","OkAY","OKAY"} do go(v) end
   print("-- Failures: ".. 1-((try-fail)/try) .. "%") end

-- ## main{m:string = f:function}
-- Run function `f` if we are in module `m`.
-- Used  like Python's if \_\_name\_\_ == '\_\_main\_\_'. 
-- e.g. `main{lib=doThis}` will call `doThis()` if
-- the environment variable MAIN equals `lib`.
function main(t) 
  for s,f in pairs(t) do
    if s == os.getenv("MAIN") then return f() end end end

-------------------------------------------------------------
-- ## Object Stuff

-- ### Any:new(o)
-- Create the `any` base object
Any={id=0}
function Any:new (o)
  o = o or {}   -- create object if user does not provide one
  setmetatable(o, self)
  if not self.oid then self.oid=0 end
  self.oid = self.oid+1
  self.__index = self
  o.id = self.oid
  return o
end

function anyOkay()
  local x,y = Any:new(), Any:new()
  x.sub = y
  y.sub = x
  x.lname="tim"; x.fname="menzies"
  assert(y.id == 1 + x.id)
  oo(x)
end

main{lib=tests}
